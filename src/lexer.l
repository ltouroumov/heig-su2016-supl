%option noyywrap
%option yylineno

%{
#include "parser.hpp"       // token definitions and yylval - generated by bison

int yycolumn = 1;

#define YY_USER_ACTION {                            \
  yylloc.first_line = yylloc.last_line = yylineno;  \
  yylloc.first_column = yycolumn;                   \
  yylloc.last_column = yycolumn + yyleng - 1;       \
  yycolumn += yyleng;                               \
}
%}

IDENT [a-zA-Z_][a-zA-Z0-9_]*

%%

[ \t]   {;}
[\n]+   { yycolumn = 1; }

int     { return tIntType; }
void    { return tVoidType; }

if      { return tIf; }
else    { return tElse; }
while   { return tWhile; }
return  { return tReturn; }

print   { return tPrint; }
read    { return tRead; }
write   { return tWrite; }

,       { return tSep; }
;       { return tTerm; }
"{"     { return tLbr; }
"}"     { return tRbr; }
"("     { return tLpar; }
")"     { return tRpar; }

"="                    { return tAssign; }
"+"                    { return tMathAdd; }
"-"                    { return tMathSub; }
"*"                    { return tMathMul; }
"/"                    { return tMathDiv; }
"%"                    { return tMathMod; }
"^"                    { return tMathExp; }
"=="                   { return tCmpEq; }
"<="                   { return tCmpLe; }
"<"                    { return tCmpLt; }

\".+\"  {
  int len = strlen(yytext);
  yylval.str = strdup(yytext+1);
  yylval.str[len-2] = '\0';
  return tStr;
}

{IDENT} { yylval.str = strdup(yytext); return tIdent; }
[0-9]+   { yylval.num = atoi(yytext); return tNumber; }

.       { printf("(??, %s)\n", yytext); }

%%